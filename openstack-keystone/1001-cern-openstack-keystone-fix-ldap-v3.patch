From 829a2349312c2c294df22c55c76fb0b0afda200f Mon Sep 17 00:00:00 2001
From: Marcos Lobo <marcos.fermin.lobo@cern.ch>
Date: Mon, 18 Nov 2013 14:59:46 +0100
Subject: [PATCH] LDAP Assignment does not support grant v3 API

The LDAP assignment backend is missing support for several of the v3
APIs. This patch implements Role Grant CRUD for V3 Assignment API:

- Role Grant CRUD
  + create_grant
  + get_grant
  + delete_grant
  + update_grant

- GET /role_assignments
  + list_role_assignments

Closes-Bug: #1248952
Partial-Bug: #1101287
Partial-Bug: #1221805

Change-Id: I1fb247b538e6a11085a18f0103cb8508d58e664f
---
 keystone/assignment/backends/ldap.py |  176 +++++++++++++++++++++++++++++++--
 keystone/tests/test_backend_ldap.py  |  180 +++++++++++++++++++++++++++++----
 2 files changed, 323 insertions(+), 33 deletions(-)

diff --git a/keystone/assignment/backends/ldap.py b/keystone/assignment/backends/ldap.py
index 5985cb4..ea75a2d 100644
--- a/keystone/assignment/backends/ldap.py
+++ b/keystone/assignment/backends/ldap.py
@@ -27,17 +27,11 @@
 from keystone import config
 from keystone import exception
 from keystone.identity.backends import ldap as ldap_identity
-from keystone.openstack.common import log as logging
+from keystone.openstack.common import log
 
 
 CONF = config.CONF
-LOG = logging.getLogger(__name__)
-
-DEFAULT_DOMAIN = {
-    'id': CONF.identity.default_domain_id,
-    'name': 'Default',
-    'enabled': True
-}
+LOG = log.getLogger(__name__)
 
 
 @dependency.requires('identity_api')
@@ -57,7 +51,6 @@
 
         self.project = ProjectApi(CONF)
         self.role = RoleApi(CONF)
-        self._identity_api = None
 
     def get_project(self, tenant_id):
         return self._set_default_domain(self.project.get(tenant_id))
@@ -98,13 +91,35 @@
                     (self.project._id_to_dn(tenant_id))
                     if self.user._dn_to_id(a.user_dn) == user_id]
 
+        def _get_roles_for_group_and_project(group_id, project_id):
+            self.identity_api.get_group(group_id)
+            self.get_project(project_id)
+            group_dn = self.group._id_to_dn(group_id)
+            # NOTE(marcos-fermin-lobo): In Active Directory, for functions
+            # such as "self.role.get_role_assignments", it returns
+            # the key "CN" or "OU" in uppercase.
+            # The group_dn var has "CN" and "OU" in lowercase.
+            # For this reason, it is necessary to use the "upper()"
+            # function so both are consistent.
+            return [self.role._dn_to_id(a.role_dn)
+                    for a in self.role.get_role_assignments
+                    (self.project._id_to_dn(project_id))
+                    if a.user_dn.upper() == group_dn.upper()]
+
         if domain_id is not None:
             msg = 'Domain metadata not supported by LDAP'
             raise exception.NotImplemented(message=msg)
-        if tenant_id is None or user_id is None:
+        if group_id is None and user_id is None:
             return {}
 
-        metadata_ref = _get_roles_for_just_user_and_project(user_id, tenant_id)
+        if tenant_id is None:
+            return {}
+        if user_id is None:
+            metadata_ref = _get_roles_for_group_and_project(group_id,
+                                                            tenant_id)
+        else:
+            metadata_ref = _get_roles_for_just_user_and_project(user_id,
+                                                                tenant_id)
         if not metadata_ref:
             return {}
         return {'roles': [self._role_to_dict(r, False) for r in metadata_ref]}
@@ -152,10 +167,21 @@
         role_dn = self._subrole_id_to_dn(role_id, tenant_id)
         self.role.add_user(role_id, role_dn, user_dn, user_id, tenant_id)
         tenant_dn = self.project._id_to_dn(tenant_id)
-        return UserRoleAssociation(
-            role_dn=role_dn,
-            user_dn=user_dn,
-            tenant_dn=tenant_dn)
+        return UserRoleAssociation(role_dn=role_dn,
+                                   user_dn=user_dn,
+                                   tenant_dn=tenant_dn)
+
+    def _add_role_to_group_and_project(self, group_id, tenant_id, role_id):
+        self.identity_api.get_group(group_id)
+        self.get_project(tenant_id)
+        self.get_role(role_id)
+        group_dn = self.group._id_to_dn(group_id)
+        role_dn = self._subrole_id_to_dn(role_id, tenant_id)
+        self.role.add_user(role_id, role_dn, group_dn, group_id, tenant_id)
+        tenant_dn = self.project._id_to_dn(tenant_id)
+        return GroupRoleAssociation(group_dn=group_dn,
+                                    role_dn=role_dn,
+                                    tenant_dn=tenant_dn)
 
     def _create_metadata(self, user_id, tenant_id, metadata):
         return {}
@@ -184,7 +210,7 @@
 
     def delete_project(self, tenant_id):
         if self.project.subtree_delete_enabled:
-            self.project.deleteTree(id)
+            self.project.deleteTree(tenant_id)
         else:
             tenant_dn = self.project._id_to_dn(tenant_id)
             self.role.roles_delete_subtree_by_project(tenant_dn)
@@ -197,9 +223,17 @@
                                      self.project._id_to_dn(tenant_id),
                                      user_id, role_id)
 
+    def _remove_role_from_group_and_project(self, group_id, tenant_id,
+                                            role_id):
+        role_dn = self._subrole_id_to_dn(role_id, tenant_id)
+        return self.role.delete_user(role_dn,
+                                     self.group._id_to_dn(group_id),
+                                     self.project._id_to_dn(tenant_id),
+                                     group_id, role_id)
+
     def update_role(self, role_id, role):
         self.get_role(role_id)
-        self.role.update(role_id, role)
+        return self.role.update(role_id, role)
 
     def create_domain(self, domain_id, domain):
         if domain_id == CONF.identity.default_domain_id:
@@ -209,7 +243,7 @@
 
     def get_domain(self, domain_id):
         self._validate_default_domain_id(domain_id)
-        return DEFAULT_DOMAIN
+        return assignment.DEFAULT_DOMAIN
 
     def update_domain(self, domain_id, domain):
         self._validate_default_domain_id(domain_id)
@@ -246,7 +280,7 @@
             # role support which will be added under bug 1101287
             query = '(objectClass=%s)' % self.group.object_class
             dn = None
-            dn = self.group._id_to_dn(id)
+            dn = self.group._id_to_dn(group_id)
             if dn:
                 try:
                     conn = self.group.get_connection()
@@ -259,6 +293,116 @@
                 finally:
                     conn.unbind_s()
 
+    def create_grant(self, role_id, user_id=None, group_id=None,
+                     domain_id=None, project_id=None,
+                     inherited_to_projects=False):
+        self.get_role(role_id)
+
+        if domain_id:
+            self.get_domain(domain_id)
+        if project_id:
+            self.get_project(project_id)
+
+        if project_id and inherited_to_projects:
+            msg = _('Inherited roles can only be assigned to domains')
+            raise exception.Conflict(type='role grant', details=msg)
+
+        try:
+            metadata_ref = self._get_metadata(user_id, project_id,
+                                              domain_id, group_id)
+        except exception.MetadataNotFound:
+            metadata_ref = {}
+
+        if user_id is None:
+            metadata_ref['roles'] = self._add_role_to_group_and_project(
+                group_id, project_id, role_id)
+        else:
+            metadata_ref['roles'] = self.add_role_to_user_and_project(
+                user_id, project_id, role_id)
+
+    def get_grant(self, role_id, user_id=None, group_id=None,
+                  domain_id=None, project_id=None,
+                  inherited_to_projects=False):
+        role_ref = self.get_role(role_id)
+
+        if domain_id:
+            self.get_domain(domain_id)
+        if project_id:
+            self.get_project(project_id)
+
+        try:
+            metadata_ref = self._get_metadata(user_id, project_id,
+                                              domain_id, group_id)
+        except exception.MetadataNotFound:
+            metadata_ref = {}
+        role_ids = set(self._roles_from_role_dicts(
+            metadata_ref.get('roles', []), inherited_to_projects))
+        if role_id not in role_ids:
+            raise exception.RoleNotFound(role_id=role_id)
+        return role_ref
+
+    def delete_grant(self, role_id, user_id=None, group_id=None,
+                     domain_id=None, project_id=None,
+                     inherited_to_projects=False):
+        if user_id:
+            self.identity_api.get_user(user_id)
+        if group_id:
+            self.identity_api.get_group(group_id)
+
+        self.get_role(role_id)
+
+        if domain_id:
+            self.get_domain(domain_id)
+        if project_id:
+            self.get_project(project_id)
+
+        try:
+            metadata_ref = self._get_metadata(user_id, project_id,
+                                              domain_id, group_id)
+        except exception.MetadataNotFound:
+            metadata_ref = {}
+
+        try:
+            if user_id is None:
+                metadata_ref['roles'] = (
+                    self._remove_role_from_group_and_project(
+                        group_id, project_id, role_id))
+            else:
+                metadata_ref['roles'] = self.remove_role_from_user_and_project(
+                    user_id, project_id, role_id)
+        except KeyError:
+            raise exception.RoleNotFound(role_id=role_id)
+
+    def list_grants(self, user_id=None, group_id=None,
+                    domain_id=None, project_id=None,
+                    inherited_to_projects=False):
+        if domain_id:
+            self.get_domain(domain_id)
+        if project_id:
+            self.get_project(project_id)
+
+        try:
+            metadata_ref = self._get_metadata(user_id, project_id,
+                                              domain_id, group_id)
+        except exception.MetadataNotFound:
+            metadata_ref = {}
+
+        return [self.get_role(x) for x in
+                self._roles_from_role_dicts(metadata_ref.get('roles', []),
+                                            inherited_to_projects)]
+
+    def get_domain_by_name(self, domain_name):
+        raise exception.NotImplemented()
+
+    def list_role_assignments(self):
+        role_assignments = []
+        for a in self.role.list_role_assignments(self.project.tree_dn):
+            assignment = {'role_id': self.role._dn_to_id(a.role_dn),
+                          'user_id': self.user._dn_to_id(a.user_dn),
+                          'project_id': self.project._dn_to_id(a.project_dn)}
+            role_assignments.append(assignment)
+        return role_assignments
+
 
 # TODO(termie): turn this into a data object and move logic to driver
 class ProjectApi(common_ldap.EnabledEmuMixIn, common_ldap.BaseLdap):
@@ -346,9 +490,9 @@
                 res.add(rolegrant.user_dn)
         return list(res)
 
-    def update(self, id, values):
-        old_obj = self.get(id)
-        return super(ProjectApi, self).update(id, values, old_obj)
+    def update(self, project_id, values):
+        old_obj = self.get(project_id)
+        return super(ProjectApi, self).update(project_id, values, old_obj)
 
 
 class UserRoleAssociation(object):
@@ -388,8 +532,8 @@
         self.member_attribute = (getattr(conf.ldap, 'role_member_attribute')
                                  or self.DEFAULT_MEMBER_ATTRIBUTE)
 
-    def get(self, id, filter=None):
-        model = super(RoleApi, self).get(id, filter)
+    def get(self, role_id, role_filter=None):
+        model = super(RoleApi, self).get(role_id, role_filter)
         return model
 
     def create(self, values):
@@ -518,10 +662,10 @@
             pass
         return super(RoleApi, self).update(role_id, role)
 
-    def delete(self, id, tenant_dn):
+    def delete(self, role_id, tenant_dn):
         conn = self.get_connection()
         query = '(&(objectClass=%s)(%s=%s))' % (self.object_class,
-                                                self.id_attr, id)
+                                                self.id_attr, role_id)
         try:
             for role_dn, _ in conn.search_s(tenant_dn,
                                             ldap.SCOPE_SUBTREE,
@@ -531,4 +675,33 @@
             pass
         finally:
             conn.unbind_s()
-        super(RoleApi, self).delete(id)
+        super(RoleApi, self).delete(role_id)
+
+    def list_role_assignments(self, project_tree_dn):
+        """Returns a list of all the role assignments linked to project_tree_dn
+        attribute.
+        """
+        conn = self.get_connection()
+        query = '(objectClass=%s)' % (self.object_class)
+        try:
+            roles = conn.search_s(project_tree_dn,
+                                  ldap.SCOPE_SUBTREE,
+                                  query)
+        except ldap.NO_SUCH_OBJECT:
+            return []
+        finally:
+            conn.unbind_s()
+
+        res = []
+        for role_dn, role in roles:
+            tenant = ldap.dn.str2dn(role_dn)
+            tenant.pop(0)
+            # It obtains the tenant DN to construct the UserRoleAssociation
+            # object.
+            tenant_dn = ldap.dn.dn2str(tenant)
+            for user_dn in role[self.member_attribute]:
+                res.append(UserRoleAssociation(
+                           user_dn=user_dn,
+                           role_dn=role_dn,
+                           tenant_dn=tenant_dn))
+        return res
