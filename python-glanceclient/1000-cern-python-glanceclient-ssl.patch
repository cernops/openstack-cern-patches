--- glanceclient/shell.py.orig	2013-02-05 09:53:21.000000000 +0100
+++ glanceclient/shell.py	2013-02-05 10:12:01.000000000 +0100
@@ -71,11 +71,18 @@
         parser.add_argument('--key-file',
             help='Path of client key to use in SSL connection. This option is '
                  'not necessary if your key is prepended to your cert file.')
-
+        
+        parser.add_argument('--os-cacert',
+            metavar='<ca-certificate-file>',
+            dest='os_cacert',
+            default=utils.env('OS_CACERT'),
+            help='Path of CA TLS certificate(s) used to verify'
+                 'the remote server\'s certificate. Without this '
+                 'option glance looks for the default system '
+                 'CA certificates.')
         parser.add_argument('--ca-file',
-            help='Path of CA SSL certificate(s) used to verify the remote '
-                 'server\'s certificate. Without this option glance looks '
-                 'for the default system CA certificates.')
+            dest='os_cacert',
+            help='DEPRECATED! Use --os-cacert.')
 
         parser.add_argument('--timeout',
             default=600,
@@ -298,6 +305,7 @@
                                tenant_id=kwargs.get('tenant_id'),
                                tenant_name=kwargs.get('tenant_name'),
                                auth_url=kwargs.get('auth_url'),
+                               cacert=kwargs.get('cacert'),
                                insecure=kwargs.get('insecure'))
 
     def _get_endpoint(self, client, **kwargs):
@@ -380,6 +388,7 @@
                 'auth_url': args.os_auth_url,
                 'service_type': args.os_service_type,
                 'endpoint_type': args.os_endpoint_type,
+                'cacert': args.os_cacert,
                 'insecure': args.insecure
             }
             _ksclient = self._get_ksclient(**kwargs)
@@ -392,7 +401,7 @@
             'token': token,
             'insecure': args.insecure,
             'timeout': args.timeout,
-            'ca_file': args.ca_file,
+            'cacert': args.os_cacert,
             'cert_file': args.cert_file,
             'key_file': args.key_file,
         }
--- glanceclient/common/http.py.orig	2013-02-04 17:18:27.000000000 +0100
+++ glanceclient/common/http.py	2013-02-05 10:18:00.000000000 +0100
@@ -62,7 +62,7 @@
 
         if parts.scheme == 'https':
             _class = VerifiedHTTPSConnection
-            _kwargs['ca_file'] = kwargs.get('ca_file', None)
+            _kwargs['cacert'] = kwargs.get('cacert', None)
             _kwargs['cert_file'] = kwargs.get('cert_file', None)
             _kwargs['key_file'] = kwargs.get('key_file', None)
             _kwargs['insecure'] = kwargs.get('insecure', False)
@@ -92,7 +92,7 @@
         conn_params_fmt = [
             ('key_file', '--key %s'),
             ('cert_file', '--cert %s'),
-            ('ca_file', '--cacert %s'),
+            ('cacert', '--cacert %s'),
         ]
         for (key, fmt) in conn_params_fmt:
             value = self.connection_params[2].get(key)
@@ -199,15 +199,15 @@
     """
 
     def __init__(self, host, port, key_file=None, cert_file=None,
-                 ca_file=None, timeout=None, insecure=False):
+                 cacert=None, timeout=None, insecure=False):
         httplib.HTTPSConnection.__init__(self, host, port, key_file=key_file,
                                          cert_file=cert_file)
         self.key_file = key_file
         self.cert_file = cert_file
-        if ca_file is not None:
-            self.ca_file = ca_file
+        if cacert is not None:
+            self.cacert = cacert
         else:
-            self.ca_file = self.get_system_ca_file()
+            self.cacert = self.get_system_ca_file()
         self.timeout = timeout
         self.insecure = insecure
 
@@ -230,7 +230,7 @@
         if self.insecure is True:
             kwargs = {'cert_reqs': ssl.CERT_NONE}
         else:
-            kwargs = {'cert_reqs': ssl.CERT_REQUIRED, 'ca_certs': self.ca_file}
+            kwargs = {'cert_reqs': ssl.CERT_REQUIRED, 'ca_certs': self.cacert}
 
         if self.cert_file:
             kwargs['certfile'] = self.cert_file
